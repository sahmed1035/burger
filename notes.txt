 users input the names of burgers they'd like to eat.
 user submits a burger's name, the app will display the burger on the left side of the page.
 left side waiting area with`Devour it!` button. waiting to be devoured.
 When the user clicks Devour it!` button, the burger will move to the right side of the page.
 store every burger in a database, whether devoured or not.


  * In the `orm.js` file, create the methods that will execute the necessary MySQL commands in the controllers. These are the methods you will need to use in order to retrieve and store data in your database.

     * `selectAll()`
     * `insertOne()`
     * `updateOne()`

   * Export the ORM object in `module.exports`.

inside `burger.js`, create the code that will call the ORM functions using burger specific input for the ORM.

    * Export at the end of the `burger.js` file.


Setup the `main.handlebars` file so it's able to be used by Handlebars.


Setup the `index.handlebars` to have the template that Handlebars can render onto.

Create a button in `index.handlebars` that will submit the user input into the database.


New Burger:
1. Add a new burger with devoured = false.
2. clicking "Add burger" button without burger name should not create any empty entry in the database. 
3. clicking "Add burger" button without burger name should not create any buttons on the html.
4. Entries manually deleting in the db should also remove the "devoured it" button in the front-end.

Not devoured:
1. when the "devoure it" button is clicked, burger with that button id and the button should disapear.
2. the "devoured" in the db should change to true. 
3. the same burger should appear in the right-side-div under devoured.

devoured:
1. this div should have an id to display burgers with the "devoured = true".

LOGIC:
when "devoure it" is clicked, UPDATE "devoured" in the db to '1'.

if(devoured = true) => hide burger and button from left-div. show burger_name in the right-div.

---need to fix css as well. 